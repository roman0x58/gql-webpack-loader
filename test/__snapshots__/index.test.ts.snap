// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gql loader transforms GraphQL query to ES6 module and generates appropriate declaration file using provided schema: declaration 1`] = `
"import type { GqlModule, GqlQuery } from 'gql-webpack-loader';
import type { someQueryOperationArgModel, someMutationOperationArgModel, QueryModel, MutationModel } from \\"./schema.ts\\";

export interface QueryOperationName1Query extends GqlQuery {
   \\"someQueryOperation\\"? : QueryModel[\\"someQueryOperation\\"]    
}
export interface QueryOperationName2Query extends GqlQuery {
   \\"someQueryOperation\\"? : QueryModel[\\"someQueryOperation\\"]    
}
export interface MutationOperationNameMutation extends GqlQuery {
   \\"someMutationOperation\\"? : MutationModel[\\"someMutationOperation\\"]    
}

declare const _default: {
	\\"queryOperationName1\\": GqlModule<QueryOperationName1Query, someQueryOperationArgModel>;
	\\"queryOperationName2\\": GqlModule<QueryOperationName2Query, someQueryOperationArgModel>;
	\\"mutationOperationName\\": GqlModule<MutationOperationNameMutation, someMutationOperationArgModel>
};

export default _default;"
`;

exports[`gql loader transforms GraphQL query to ES6 module and generates appropriate declaration file using provided schema: output 1`] = `
"export default { 
	\\"queryOperationName1\\": { 
\\"query\\": \`query queryOperationName1($id: String) {
  someQueryOperation(id: $id) {
    field1
    field2
    ...Fragment1
  }
}
fragment Fragment1 on SomeOperationReturnType {
  field3
}\`,
\\"operation\\": \\"queryOperationName1\\" 
},
	\\"queryOperationName2\\": { 
\\"query\\": \`query queryOperationName2($id: String) {
  someQueryOperation(id: $id) {
    field1
  }
}\`,
\\"operation\\": \\"queryOperationName2\\" 
},
	\\"mutationOperationName\\": { 
\\"query\\": \`mutation mutationOperationName($id: String) {
  someMutationOperation(id: $id) {
    field1
    field2
  }
}\`,
\\"operation\\": \\"mutationOperationName\\" 
}
}"
`;

exports[`gql loader transforms GraphQL query to ES6 module without declaration: output 1`] = `
"export default { 
	\\"queryOperationName1\\": { 
\\"query\\": \`query queryOperationName1($id: String) {
  someQueryOperation(id: $id) {
    field1
    field2
    ...Fragment1
  }
}
fragment Fragment1 on SomeOperationReturnType {
  field3
}\`,
\\"operation\\": \\"queryOperationName1\\" 
},
	\\"queryOperationName2\\": { 
\\"query\\": \`query queryOperationName2($id: String) {
  someQueryOperation(id: $id) {
    field1
  }
}\`,
\\"operation\\": \\"queryOperationName2\\" 
},
	\\"mutationOperationName\\": { 
\\"query\\": \`mutation mutationOperationName($id: String) {
  someMutationOperation(id: $id) {
    field1
    field2
  }
}\`,
\\"operation\\": \\"mutationOperationName\\" 
}
}"
`;

exports[`gql loader transforms GraphQL query to ES6 module without variable interface name configuration: declaration 1`] = `
"import type { GqlModule, GqlQuery } from 'gql-webpack-loader';
import type { QueryModel, MutationModel } from \\"./schema.ts\\";

export interface QueryOperationName1Query extends GqlQuery {
   \\"someQueryOperation\\"? : QueryModel[\\"someQueryOperation\\"]    
}
export interface QueryOperationName2Query extends GqlQuery {
   \\"someQueryOperation\\"? : QueryModel[\\"someQueryOperation\\"]    
}
export interface MutationOperationNameMutation extends GqlQuery {
   \\"someMutationOperation\\"? : MutationModel[\\"someMutationOperation\\"]    
}

declare const _default: {
	\\"queryOperationName1\\": GqlModule<QueryOperationName1Query, { [key: string]: any }>;
	\\"queryOperationName2\\": GqlModule<QueryOperationName2Query, { [key: string]: any }>;
	\\"mutationOperationName\\": GqlModule<MutationOperationNameMutation, { [key: string]: any }>
};

export default _default;"
`;

exports[`gql loader transforms GraphQL query to ES6 module without variable interface name configuration: output 1`] = `
"export default { 
	\\"queryOperationName1\\": { 
\\"query\\": \`query queryOperationName1($id: String) {
  someQueryOperation(id: $id) {
    field1
    field2
    ...Fragment1
  }
}
fragment Fragment1 on SomeOperationReturnType {
  field3
}\`,
\\"operation\\": \\"queryOperationName1\\" 
},
	\\"queryOperationName2\\": { 
\\"query\\": \`query queryOperationName2($id: String) {
  someQueryOperation(id: $id) {
    field1
  }
}\`,
\\"operation\\": \\"queryOperationName2\\" 
},
	\\"mutationOperationName\\": { 
\\"query\\": \`mutation mutationOperationName($id: String) {
  someMutationOperation(id: $id) {
    field1
    field2
  }
}\`,
\\"operation\\": \\"mutationOperationName\\" 
}
}"
`;
