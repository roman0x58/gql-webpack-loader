// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gql loader transforms GraphQL query to ES6 module and generates appropriate declaration file using provided schema: declaration 1`] = `
"import type { GqlModule, GqlQuery } from 'gql-webpack-loader';
import type { QueryField3SomeQueryOperationArgsModel, QuerySomeQueryOperationArgsModel, MutationSomeMutationOperationArgsModel, QueryModel, MutationModel } from "./schema.ts";

export interface QueryOperationName1Query extends GqlQuery {
   "someQueryOperation"? : QueryModel["someQueryOperation"]    
}
export interface QueryOperationName2Query extends GqlQuery {
   "someQueryOperation"? : QueryModel["someQueryOperation"]    
}
export interface MutationOperationNameMutation extends GqlQuery {
   "someMutationOperation"? : MutationModel["someMutationOperation"]    
}

export declare const _default: {
	"queryOperationName1": GqlModule<QueryOperationName1Query, QueryField3SomeQueryOperationArgsModel & QuerySomeQueryOperationArgsModel>;
	"queryOperationName2": GqlModule<QueryOperationName2Query, QuerySomeQueryOperationArgsModel>;
	"mutationOperationName": GqlModule<MutationOperationNameMutation, MutationSomeMutationOperationArgsModel>
};

export default _default;"
`;

exports[`gql loader transforms GraphQL query to ES6 module and generates appropriate declaration file using provided schema: output 1`] = `
"export default {
	"queryOperationName1": { 
"query": \`query queryOperationName1($id: String, $x: Int) {
  someQueryOperation(id: $id) {
    field1
    field2
    field3(x: $x) {
      field3_1
    }
    ...Fragment1
  }
}
fragment Fragment1 on SomeOperationReturnType {
  field3
}\`,
"operation": "queryOperationName1" 
},
	"queryOperationName2": { 
"query": \`query queryOperationName2($id: String) {
  someQueryOperation(id: $id) {
    field1
  }
}\`,
"operation": "queryOperationName2" 
},
	"mutationOperationName": { 
"query": \`mutation mutationOperationName($id: String) {
  someMutationOperation(id: $id) {
    field1
    field2
  }
}\`,
"operation": "mutationOperationName" 
}
}"
`;

exports[`gql loader transforms GraphQL query to ES6 module with named import: declaration 1`] = `
"import type { GqlModule, GqlQuery } from 'gql-webpack-loader';
import type { QueryField3SomeQueryOperationArgsModel, QuerySomeQueryOperationArgsModel, MutationSomeMutationOperationArgsModel, QueryModel, MutationModel } from "./schema.ts";

export interface QueryOperationName1Query extends GqlQuery {
   "someQueryOperation"? : QueryModel["someQueryOperation"]    
}
export interface QueryOperationName2Query extends GqlQuery {
   "someQueryOperation"? : QueryModel["someQueryOperation"]    
}
export interface MutationOperationNameMutation extends GqlQuery {
   "someMutationOperation"? : MutationModel["someMutationOperation"]    
}

export declare const QueryGql: {
	"queryOperationName1": GqlModule<QueryOperationName1Query, QueryField3SomeQueryOperationArgsModel & QuerySomeQueryOperationArgsModel>;
	"queryOperationName2": GqlModule<QueryOperationName2Query, QuerySomeQueryOperationArgsModel>;
	"mutationOperationName": GqlModule<MutationOperationNameMutation, MutationSomeMutationOperationArgsModel>
};

export default QueryGql;"
`;

exports[`gql loader transforms GraphQL query to ES6 module with named import: named-import 1`] = `
"export const QueryGql = {
	"queryOperationName1": { 
"query": \`query queryOperationName1($id: String, $x: Int) {
  someQueryOperation(id: $id) {
    field1
    field2
    field3(x: $x) {
      field3_1
    }
    ...Fragment1
  }
}
fragment Fragment1 on SomeOperationReturnType {
  field3
}\`,
"operation": "queryOperationName1" 
},
	"queryOperationName2": { 
"query": \`query queryOperationName2($id: String) {
  someQueryOperation(id: $id) {
    field1
  }
}\`,
"operation": "queryOperationName2" 
},
	"mutationOperationName": { 
"query": \`mutation mutationOperationName($id: String) {
  someMutationOperation(id: $id) {
    field1
    field2
  }
}\`,
"operation": "mutationOperationName" 
}  
};
export default QueryGql;"
`;

exports[`gql loader transforms GraphQL query to ES6 module without declaration: output 1`] = `
"export default {
	"queryOperationName1": { 
"query": \`query queryOperationName1($id: String, $x: Int) {
  someQueryOperation(id: $id) {
    field1
    field2
    field3(x: $x) {
      field3_1
    }
    ...Fragment1
  }
}
fragment Fragment1 on SomeOperationReturnType {
  field3
}\`,
"operation": "queryOperationName1" 
},
	"queryOperationName2": { 
"query": \`query queryOperationName2($id: String) {
  someQueryOperation(id: $id) {
    field1
  }
}\`,
"operation": "queryOperationName2" 
},
	"mutationOperationName": { 
"query": \`mutation mutationOperationName($id: String) {
  someMutationOperation(id: $id) {
    field1
    field2
  }
}\`,
"operation": "mutationOperationName" 
}
}"
`;

exports[`gql loader transforms GraphQL query to ES6 module without variable interface name configuration: declaration 1`] = `
"import type { GqlModule, GqlQuery } from 'gql-webpack-loader';
import type { QueryField3SomeQueryOperationArgsModel, QuerySomeQueryOperationArgsModel, MutationSomeMutationOperationArgsModel, QueryModel, MutationModel } from "./schema.ts";

export interface QueryOperationName1Query extends GqlQuery {
   "someQueryOperation"? : QueryModel["someQueryOperation"]    
}
export interface QueryOperationName2Query extends GqlQuery {
   "someQueryOperation"? : QueryModel["someQueryOperation"]    
}
export interface MutationOperationNameMutation extends GqlQuery {
   "someMutationOperation"? : MutationModel["someMutationOperation"]    
}

export declare const _default: {
	"queryOperationName1": GqlModule<QueryOperationName1Query, QueryField3SomeQueryOperationArgsModel & QuerySomeQueryOperationArgsModel>;
	"queryOperationName2": GqlModule<QueryOperationName2Query, QuerySomeQueryOperationArgsModel>;
	"mutationOperationName": GqlModule<MutationOperationNameMutation, MutationSomeMutationOperationArgsModel>
};

export default _default;"
`;

exports[`gql loader transforms GraphQL query to ES6 module without variable interface name configuration: output 1`] = `
"export default {
	"queryOperationName1": { 
"query": \`query queryOperationName1($id: String, $x: Int) {
  someQueryOperation(id: $id) {
    field1
    field2
    field3(x: $x) {
      field3_1
    }
    ...Fragment1
  }
}
fragment Fragment1 on SomeOperationReturnType {
  field3
}\`,
"operation": "queryOperationName1" 
},
	"queryOperationName2": { 
"query": \`query queryOperationName2($id: String) {
  someQueryOperation(id: $id) {
    field1
  }
}\`,
"operation": "queryOperationName2" 
},
	"mutationOperationName": { 
"query": \`mutation mutationOperationName($id: String) {
  someMutationOperation(id: $id) {
    field1
    field2
  }
}\`,
"operation": "mutationOperationName" 
}
}"
`;
