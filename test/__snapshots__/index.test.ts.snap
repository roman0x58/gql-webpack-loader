// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gql loader transforms GraphQL query to TS module and generates appropriate declaration file using provided schema: declaration 1`] = `
"import { GqlModule } from 'gql-webpack-loader';
import { someQueryOperationArgModel } from \\"./schema.ts\\";
import { someMutationOperationArgModel } from \\"./schema.ts\\";
declare const _default: {
    queryOperationName1: GqlModule<import(\\"./schema.ts\\").someQueryOperationResultType, someQueryOperationArgModel>;
    queryOperationName2: GqlModule<import(\\"./schema.ts\\").someQueryOperationResultType, someQueryOperationArgModel>;
    mutationOperationName: GqlModule<import(\\"./schema.ts\\").someMutationOperationResultType, someMutationOperationArgModel>;
};
export default _default;
"
`;

exports[`gql loader transforms GraphQL query to TS module and generates appropriate declaration file using provided schema: output 1`] = `
"\\"use strict\\";
exports.__esModule = true;
exports[\\"default\\"] = {
    \\"queryOperationName1\\": {
        query: \\"query queryOperationName1($id: String) {\\\\n  someQueryOperation(id: $id) {\\\\n    field1\\\\n    field2\\\\n    ...Fragment1\\\\n  }\\\\n}\\\\nfragment Fragment1 on SomeOperationReturnType {\\\\n  field3\\\\n}\\",
        operation: \\"queryOperationName1\\"
    },
    \\"queryOperationName2\\": {
        query: \\"query queryOperationName2($id: String) {\\\\n  someQueryOperation(id: $id) {\\\\n    field1\\\\n  }\\\\n}\\",
        operation: \\"queryOperationName2\\"
    },
    \\"mutationOperationName\\": {
        query: \\"mutation mutationOperationName($id: String) {\\\\n  someMutationOperation(id: $id) {\\\\n    field1\\\\n    field2\\\\n  }\\\\n}\\",
        operation: \\"mutationOperationName\\"
    }
};
"
`;

exports[`gql loader transforms GraphQL query to TS module without variable interface name configuration: declaration 1`] = `
"import { GqlModule } from 'gql-webpack-loader';
declare const _default: {
    queryOperationName1: GqlModule<import(\\"./schema.ts\\").someQueryOperationResultType, {
        [key: string]: any;
    }>;
    queryOperationName2: GqlModule<import(\\"./schema.ts\\").someQueryOperationResultType, {
        [key: string]: any;
    }>;
    mutationOperationName: GqlModule<import(\\"./schema.ts\\").someMutationOperationResultType, {
        [key: string]: any;
    }>;
};
export default _default;
"
`;

exports[`gql loader transforms GraphQL query to TS module without variable interface name configuration: output 1`] = `
"\\"use strict\\";
exports.__esModule = true;
exports[\\"default\\"] = {
    \\"queryOperationName1\\": {
        query: \\"query queryOperationName1($id: String) {\\\\n  someQueryOperation(id: $id) {\\\\n    field1\\\\n    field2\\\\n    ...Fragment1\\\\n  }\\\\n}\\\\nfragment Fragment1 on SomeOperationReturnType {\\\\n  field3\\\\n}\\",
        operation: \\"queryOperationName1\\"
    },
    \\"queryOperationName2\\": {
        query: \\"query queryOperationName2($id: String) {\\\\n  someQueryOperation(id: $id) {\\\\n    field1\\\\n  }\\\\n}\\",
        operation: \\"queryOperationName2\\"
    },
    \\"mutationOperationName\\": {
        query: \\"mutation mutationOperationName($id: String) {\\\\n  someMutationOperation(id: $id) {\\\\n    field1\\\\n    field2\\\\n  }\\\\n}\\",
        operation: \\"mutationOperationName\\"
    }
};
"
`;
